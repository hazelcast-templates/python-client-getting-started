# Python Client Getting Started

## What You’ll Learn

This tutorial will get you started with the Hazelcast Python client and manipulate a map.

## Before you Begin

* Python 3.6 or above
* A text editor or IDE

### Start a Hazelcast Viridian Cloud Cluster

1. Sign up for a Hazelcast Viridian Cloud account (free trial is available).
2. Log in to your Hazelcast Viridian Cloud account and start your trial by filling in the welcome questionnaire.
3. A Viridian cluster will be created automatically when you start your trial.
4. Press the Connect Cluster dialog and switch over to the CLC tab for information about how to import the cluster configuration with Hazelcast CLC. 

### Setup the Environment

1. Create a virtual Python environment:
   ```
   python3 -m venv venv
   ```
2. Activate the virtual environment:
   ```
   # Linux / MacOS
   source venv/bin/activate
   
   # Windows
   .\venv\Scripts\activate
   ```
3. Install the dependencies:
   ```
   pip install -r requirements.txt
   ```

## 1. Understanding the Python Client

The `1-welcome.py` example starts a Hazelcast client with default configuration, connects to your cluster before shutting the client down at the end.

```
python3 1-welcome.py
```

To understand and use the client, review the [Python API documentation](https://hazelcast.readthedocs.io/en/stable/client.html#hazelcast.client.HazelcastClient) to better understand what is possible.

## 2. Understanding the Hazelcast SQL API

Hazelcast SQL API is a Calcite SQL based interface to allow you to interact with Hazelcast much like any other datastore.

In the `2-sql-api.py` example, we will create a map and insert into it, entries where the keys are ids and the values are defined as an object representing a city.

The output of this code is given below:

```
Creating the mapping...OK.
Inserting data...OK.
Fetching cities...OK.
--Results of 'SELECT __key, this FROM cities'
|   id | country              | city                 | population      |
|    2 | United Kingdom       | Manchester           | 2770434         |
|    6 | Türkiye              | Ankara               | 5309690         |
|    1 | United Kingdom       | London               | 9540576         |
|    7 | Brazil               | Sao Paulo            | 22429800        |
|    4 | United States        | Los Angeles          | 3985520         |
|    5 | Türkiye              | Istanbul             | 15636243        |
|    3 | United States        | New York             | 19223191        |
```

Note: Ordering of the keys is NOT enforced and results may NOT correspond to insertion order.

## 3. Understanding the Hazelcast Map API

A Hazelcast Map is a distributed key-value store, similar to Python dictionary. You can store key-value pairs in a Hazelcast Map.

In the `3-map-api.py` example, we will work with map entries where the keys are ids and the values are defined as a string representing a city name.

Following line returns a map proxy object for the `cities` map:

```python
cities_map = client.get_map('cities').blocking()
```
If `cities` doesn’t exist, it will be automatically created. All the clients connected to the same cluster will have access to the same map.

You may wonder why we have used `blocking()` method over the `get_map()`.
This returns a version of this proxy with only blocking (sync) method calls, which is better for getting started.
For async calls, please check our [API documentation](https://hazelcast.readthedocs.io/en/stable/#usage).

With these lines, client adds data to the `cities` map.
The first parameter is the key of the entry, the second one is the value.

```python
cities_map.put(1, "London")
cities_map.put(2, "New York")
cities_map.put(3, "Tokyo")
```

Then, we get the data using the `entry_set()` method and iterate over the results.

```python
entries = cities_map.entry_set()

for key, value in entries:
    print(f"{key} -> {value}")
```

Finally, `client.shutdown()` terminates our client and release its resources.

The output of this code is given below:

```
2 -> New York
1 -> London
3 -> Tokyo
```

Note: Ordering of the keys is NOT enforced and results may NOT correspond to entry order.

## 4. Adding a Listener to the Map

You can add an entry listener using the `add_entry_listener()` method available on the map proxy object.
This will allow you to listen to certain events that happen in the map across the cluster.

The first argument to the `add_entry_listener()` method is `includeValue`.
This boolean parameter, if set to true, ensures the entry event contains the entry value.

The second argument to the add_entry_listener() method is an object that is used to define listeners.
In the `4-map-listener.py` example, we register listeners for the added, removed and updated events.

This enables your code to listen to map events of that particular map.

First, the map is cleared, which will trigger removed events if there are some entries in the map. Then, entries are added, and they are logged. After that, we remove one of the entries and update the other one. Then, we log the entries again.

The output is as follows.

```
Entry added with key: 1, value: London
Entry added with key: 2, value: New York
Entry added with key: 3, value: Tokyo
Entry removed with key: 1
Entry updated with key: 2, old value: New York, new value: Paris
2 -> Paris
3 -> Tokyo
```

## Summary

In this tutorial, you learned how to get started with the Hazelcast Python Client, connect to a Viridian instance and put data into a distributed map.

## See Also

There are a lot of things that you can do with the Python Client.
For more, such as how you can query a map with predicates and SQL, check out our [Python Client repository](https://github.com/hazelcast/hazelcast-python-client) and our [Python API documentation](https://hazelcast.readthedocs.io/en/stable/client.html#hazelcast.client.HazelcastClient) to better understand what is possible.

If you have any questions, suggestions, or feedback please do not hesitate to reach out to us via [Hazelcast Community Slack](https://slack.hazelcast.com/).
Also, please take a look at [the issue list](https://github.com/hazelcast/hazelcast-python-client/issues) if you would like to contribute to the client.
